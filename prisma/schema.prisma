generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

enum TokenTypes {
  PASSWORD_RECOVER
}

model Tokens {
  id        String     @id @default(cuid())
  type      TokenTypes
  code      String     @unique @db.VarChar(6)
  createdAt DateTime   @default(now()) @map("created_at")
  expiresAt DateTime?  @map("expires_at")

  employee   Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String    @map("employee_id")

  @@map("tokens")
}

model Employees {
  id             String    @id @default(cuid())
  name           String
  cpf            String    @unique
  email          String    @unique
  avatarUrl      String?   @map("avatar_url")
  avatarPublicId String?   @map("avatar_public_id")
  passwordHash   String    @map("password_hash")
  role           Roles     @default(USER)
  inactive       DateTime?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt() @map("updated_at")

  employeesRooms EmployeesRooms[]
  tokens         Tokens[]

  @@map("employees")
}

model EmployeesRooms {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  // (onDelete: Cascade) — quando um funcionário ou sala for deletado, os registros intermediários são removidos automaticamente.
  employee   Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String    @map("employee_id")
  room       Rooms     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     String    @map("room_id")

  // Evitar duplicidade, um mesmo funcionário não pode ser vinculado à mesma sala duas vezes.
  @@unique([employeeId, roomId])
  @@map("employees_rooms")
}

model Rooms {
  id           String    @id @default(cuid())
  name         String    @unique
  // Tempo padrão em minutos
  standardTime Int       @default(180) @map("standard_time")
  // Tempo restante em minutos
  remeningTime Int?      @map("remening_time")
  description  String
  inactive     DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt() @map("updated_at")

  employeesRooms EmployeesRooms[]
  computers      Computers[]

  @@map("rooms")
}

model Computers {
  id          String    @id @default(cuid())
  mac_code    String    @unique
  number      Int
  description String
  maintenance DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")

  rooms  Rooms  @relation(fields: [roomId], references: [id])
  roomId String @map("room_id")

  computerSession ComputerSessions[]
  printers        Printers[]

  @@map("computers")
}

model ComputerSessions {
  id        String    @id @default(cuid())
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime?

  computer   Computers @relation(fields: [computerId], references: [id])
  computerId String    @map("computer_id")

  lawyer   Lawyers @relation(fields: [lawyerId], references: [id])
  lawyerId String  @map("lawyer_id")

  @@map("computer_sessions")
}

model Lawyers {
  id        String   @id @default(cuid())
  name      String
  cpf       String   @unique
  oab       String   @unique
  email     String   @unique
  birth     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  computerSessions ComputerSessions[]
  printers         Printers[]

  @@map("lawyers")
}

model Printers {
  id        String   @id @default(cuid())
  url_file  String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  computer   Computers @relation(fields: [computerId], references: [id])
  computerId String    @map("computer_id")
  lawyer     Lawyers   @relation(fields: [lawyerId], references: [id])
  lawyerId   String    @map("lawyer_id")

  @@map("printers")
}
